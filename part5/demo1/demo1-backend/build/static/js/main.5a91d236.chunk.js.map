{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oMAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAEdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCO3BK,EAdM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCSEC,EAjBA,WAQX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,2G,gBCXNC,EAAU,aAwBD,EAtBA,WASb,OARgBC,IAAMC,IAAIF,GAQXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0D5BK,EA3EH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GAAY,OAAIT,EAASS,QAChC,IAEH,IAkCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASwB,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACf,cAAC,EAAD,CAAcxC,KAAMA,EAAMC,iBAAkB,kBAjDzB,SAAAqB,GACzB,IAAMtB,EAAO0B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAChDgC,EACUb,EAAIqB,GACX1B,MAAK,SAAA2B,GACJjB,EAASD,EAAMa,KAAI,SAAAG,GAAC,OAAIA,EAAEpB,KAAOA,EAAKoB,EAAIE,SAE3CC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OAAUjC,EAAKK,QAAf,sCACf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpB,KAAOA,SAoCgB0B,CAAmBhD,EAAKsB,MAA/DkB,QAGf,uBAAMS,SAnCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,KAAM,IAAIC,KACVnD,UAAWoD,KAAKC,SAAW,IAE7BrB,EACUiB,GACPnC,MAAK,SAAA2B,GACJjB,EAASD,EAAM+B,OAAOb,IACtBf,EAAW,QAwBb,UACE,uBAAO6B,MAAO9B,EAAS+B,SArBJ,SAACT,GAAD,OAAWrB,EAAWqB,EAAMU,OAAOF,UAsBtD,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCtENC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5a91d236.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  // const nonExisting = {\r\n  //   id: 10000,\r\n  //   content: 'This note is not saved to server',\r\n  //   date: '2019-05-30T17:30:31.098Z',\r\n  //   important: true,\r\n  // }\r\n  // return request.then(response => response.data.concat(nonExisting))\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport noteService from './services/notes'\r\n\r\nconst App = () => {\r\n\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }, [])\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id)) \r\n      })\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => setNewNote(event.target.value)\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => \r\n          <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}